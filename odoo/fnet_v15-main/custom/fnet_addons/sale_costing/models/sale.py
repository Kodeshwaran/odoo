from odoo import models, fields, api, _
from odoo.exceptions import UserError
from odoo.exceptions import ValidationError
import base64
import xlsxwriter



class SaleOrder(models.Model):
    _inherit = 'sale.order'

    sale_costing_id = fields.Many2one('sale.costing', string="Costing")
    purchase_line_ids = fields.One2many('purchase.order.line', 'sale_line_id', string="Generated Purchase Lines", readonly=True, help="Purchase line generated by this Sales item on order confirmation, or when the quantity was increased.")
    epo_count = fields.Integer("EPO Count")
    resource_count = fields.Integer("Resource Count")
    epo_list_document = fields.Binary(string="Epo List Document", tracking=True)
    file_name = fields.Char('File Name', tracking=True)
    sale_costing_count = fields.Integer('Sale Costing', compute='_compute_sale_costing_count')
    # costing_epo_resource_ids = fields.One2many(string='EPO')
    resource_costing_ids = fields.One2many('sale.order.line.resource', 'sale_order_id', String='Resource', readonly=True)
    epo_costing_ids = fields.One2many('sale.order.line.epo', 'sale_order_id', String='EPO', readonly=True,)
    sale_resource = fields.Integer(string='Name')
    sale_resource_qty = fields.Integer(string='Qty')
    contract_count = fields.Integer('Contract', compute='_compute_contract_count')
    contract_id = fields.Many2one('sale.contract')
    commencement_date = fields.Date(string="Commencement/On boarding Date")
    service_date = fields.Date(string="Date of Start Service")
    is_costing_order_line = fields.Boolean('Is costing order line')

    def on_boarding_mail_send(self):
        subject = "Commencement/Onboarding Date"
        body = f"""
            <p>Dear <strong>{self.partner_id.name}</strong>,</p>
            <p>
                <br>This is Your Order's Commencement/Onboarding Date: <strong>{self.commencement_date}</strong>
                <br><br>Thank You.<br>
            </p>
        """
        vals = {
            'subject': subject,
            'body_html': body,
            'email_from': self.partner_id.email,
            'email_to': self.partner_id.email,
        }
        self.message_post(body=body, subject=subject)
        mail = self.env['mail.mail'].sudo().create(vals)
        mail.sudo().send()

    @api.onchange('commencement_date', 'service_date')
    def order_date_limit(self):
        if self.date_order.date() and self.commencement_date:
            if self.date_order.date() > self.commencement_date:
                raise ValidationError(_('Commencement date cannot be before Order Date'))
        if self.date_order.date() and self.service_date:
            if self.date_order.date() > self.service_date:
                raise ValidationError(_('Service Start date cannot be before Order Date'))

    def _compute_contract_count(self):
        for rec in self:
            rec.contract_count = self.env['sale.contract'].search_count([
                ('sale_order_id', '=', rec.id)
            ])

    def action_create_contract_smart(self):
        self.ensure_one()
        contract = self.env['sale.contract'].search([
            ('sale_order_id', '=', self.id)
        ])
        result = {
            "type": "ir.actions.act_window",
            "res_model": "sale.contract",
            "domain": [('id', 'in', contract.ids)],
            "name": "Contract",
            "view_mode": "tree,form",
        }
        if len(contract) == 1:
            result['view_mode'] = 'form'
            result['res_id'] = contract.id
        return result

    def _compute_sale_costing_count(self):
        for rec in self:
            rec.sale_costing_count = self.env['sale.costing'].search_count([
                ('id', '=', rec.sale_costing_id.id)
            ])

    def action_view_sale_costing_order(self):
        self.ensure_one()
        sale_costing = self.env['sale.costing'].search([
            ('id', '=', self.sale_costing_id.id)
        ])
        result = {
            "type": "ir.actions.act_window",
            "res_model": "sale.costing",
            "domain": [['id', 'in', sale_costing.ids]],
            "name": "Sale Orders",
            'view_mode': 'tree,form',
        }
        if len(sale_costing) == 1:
            result['view_mode'] = 'form'
            result['res_id'] = sale_costing.id
        return result

    def action_revision(self):
        if self.sale_costing_id:
            raise UserError(_("Please revise the costing sheet to revise the quotation!"))
        return super(SaleOrder, self).action_revision()

    def create_subscriptions(self):
        res = super(SaleOrder, self).create_subscriptions()
        subscription = self.env['sale.subscription'].search([('id', 'in', res)], limit=1)
        customer_master = self.env['rims.customer.master'].create({
            'subscription_id': subscription.id if subscription else False,
            'name': self.partner_id.name,
            'first_epo_count': self.epo_count
        })
        if self.epo_costing_ids:
            for rec in self.epo_costing_ids:
                for j in range(rec.sale_epo_qty):
                    self.env['epo.details'].create({
                        'epo_type_id': rec.sale_epo_id.id,
                        'customer_id': customer_master.id,
                    })
        # if self.epo_costing_ids:
        #     for self.epo_costing_ids:
        #     subscription.epo_costing_ids.create({
        #         'subscription_id': subscription,
        #         's_no': self.s_no,
        #         'sale_epo_id': self.sale_epo_id,
        #         'sale_service_type_id': self.sale_service_type_id,
        #         'sale_epo_oty': self.sale_epo_oty,
        #     })
        # if self.resource_costing_ids:
        #     subscription.resource_costing_ids.create({
        #         'subscription_id': subscription,
        #         's_no': self.s_no,
        #         'sale_resource': self.sale_resource,
        #         'sale_resource_qty': self.sale_resource_qty,
        #     })
        return res

    def create_contract(self):
        subscription = ''
        for order in self.order_line:
            subscription = order.subscription_id.id
            break
        customer = self.env['rims.customer.master'].search([('subscription_id', '=', subscription)])
        contract_id = self.env['sale.contract'].create({
            'sale_order_id': self.id,
            'contract_date': fields.Datetime.now(),
            'partner_id': self.partner_id.id,
            'rims_customer_master_id': customer.id,
        })

        return {
            'type': 'ir.actions.act_window',
            'name': _('Contract'),
            'res_model': 'sale.contract',
            'res_id': contract_id.id,
            'view_type': 'form',
            'view_mode': 'form',
            # 'view_id': view_id,
            'target': 'current',
            'nodestroy': True,
        }

    # def _prepare_subscription_data(self, template):
    #     res = super(SaleOrder, self)._prepare_subscription_data(template)
    #     customer_master = self.env['rims.customer.master'].search([('subscription_id.partner_id', '=', self.partner_id.id)])
    #     if not customer_master:
    #         contract_type = self.env['rims.contract.type'].search([('name', '=', 'RIMS')])
    #         master = self.env['rims.customer.master'].create({'subscription_id': self.subscription_id.id, 'name': self.partner_id.name, 'contract_type': contract_type.id if contract_type else False})
    #         if self.epo_costing_ids:
    #             for rec in self.epo_costing_ids:
    #                 self.env['epo.details'].create({'epo_type_id': rec.sale_epo_id.id, 'customer_id': master.id})
    #     return res




class SaleOrderLine(models.Model):
    _inherit = 'sale.order.line'

    sale_costing_id = fields.Many2one('sale.costing', string="Costing")
    commencement_date = fields.Date(string="Commencement Date")
    service_date = fields.Date(string="Date of Start Service")

    @api.onchange('commencement_date', 'service_date')
    def order_date_limit(self):
        if self.order_id.date_order.date() and self.commencement_date:
            if self.order_id.date_order.date()  > self.commencement_date:
                raise ValidationError(_('Commencement date cannot be before Order Date'))
        if self.order_id.date_order.date() and self.service_date:
            if self.order_id.date_order.date()  > self.service_date:
                raise ValidationError(_('Service Start date cannot be before Order Date'))


class SaleOrderLineEpo(models.Model):
    _name = 'sale.order.line.epo'

    s_no = fields.Integer(string='S.NO')
    sale_epo_id = fields.Many2one('epo.type', string='Name')
    sale_service_type_id = fields.Many2one('crm.service', string='Service Type')
    sale_epo_qty = fields.Integer(string='Qty')
    sale_order_id = fields.Many2one('sale.order')
    subscription_id = fields.Many2one('sale.Subscription')

class SaleOrderLineResource(models.Model):
    _name = 'sale.order.line.resource'

    s_no = fields.Integer(string='S.NO')
    sale_resource = fields.Char(string='Name')
    sale_resource_qty = fields.Integer(string='Qty')
    sale_order_id = fields.Many2one('sale.order')
    subscription_id = fields.Many2one('sale.Subscription')

class RimsCustomerMaster(models.Model):
    _inherit = 'rims.customer.master'

    def action_open_upload_file(self):
        return {
            'name': 'Upload File',
            'view_mode': 'form',
            'view_type': 'form',
            'res_model': 'epo.details.wizard',
            'type': 'ir.actions.act_window',
            'target': 'new',
            'context': {
                'default_customer_id': self.id,
            },
        }



    def email(self):
        login_email = self.env.user.login
        return login_email

    def customer_email(self):
        if self.subscription_id.partner_id.email:
            customer = self.subscription_id.partner_id.email
            return customer


    def action_epo_details_report(self):
        url = '/tmp/'
        report_name = "epo_details_report"
        workbook = xlsxwriter.Workbook(url + report_name + '.xlsx')
        sheet = workbook.add_worksheet("Epo Details")
        format1 = workbook.add_format({'font_name': 'Arial'})
        format = workbook.add_format(
            {'font_name': 'Arial', 'bold': True, 'bg_color': '#486646', 'font_color': 'white', 'bottom': 2})
        sheet.set_row(0, 20)
        sheet.set_column('B:B', 30)
        sheet.set_column('C:C', 15)
        sheet.set_column('D:G', 20)
        sheet.set_column('H:H', 30)
        sheet.set_column('I:I', 20)

        sheet.write('A1', 'S.No', format)
        sheet.write('B1', 'Device Name', format)
        sheet.write('C1', 'IP Address', format)
        sheet.write('D1', 'EPO Type', format)
        sheet.write('E1', 'Device Category', format)
        sheet.write('F1', 'Platform', format)
        sheet.write('G1', 'Technology', format)
        sheet.write('H1', 'Folder', format)
        sheet.write('I1', 'Create On', format)
        n = 2
        for rec in self.epo_details:
            sheet.write('A' + str(n), rec.s_no, format1)
            sheet.write('B' + str(n), rec.device_name if rec.device_name else '', format1)
            sheet.write('C' + str(n), rec.ip_address if rec.ip_address else '', format1)
            sheet.write('D' + str(n), rec.epo_type_id.name if rec.epo_type_id.name else '', format1)
            sheet.write('E' + str(n), rec.device_category_id.name if rec.device_category_id.name else '', format1)
            sheet.write('F' + str(n), rec.platform_id.name if rec.platform_id.name else '', format1)
            sheet.write('G' + str(n), rec.technology_id.name if rec.technology_id.name else '', format1)
            sheet.write('H' + str(n), rec.folder if rec.folder else '', format1)
            sheet.write('I' + str(n), rec.create_date if rec.create_date else '', format1)
            n += 1

        sheet = workbook.add_worksheet("Customer Account manager matrix")
        format1 = workbook.add_format({'font_name': 'Arial'})
        format = workbook.add_format(
            {'font_name': 'Arial', 'bold': True, 'bg_color': '#486646', 'font_color': 'white', 'bottom': 2})
        sheet.set_row(0, 20)
        sheet.set_column('A:E', 30)

        sheet.write('A1', 'Designation', format)
        sheet.write('B1', 'Name', format)
        sheet.write('C1', 'Mail ID', format)
        sheet.write('D1', 'Contact Number', format)

        n = 2
        for rec in self.customer_matrix:
            sheet.write('A' + str(n), rec.person if rec.person else '', format1)
            sheet.write('B' + str(n), rec.name if rec.name else '', format1)
            sheet.write('C' + str(n), rec.email if rec.email else '', format1)
            sheet.write('D' + str(n), rec.contact_number if rec.contact_number else '', format1)

            n += 1

        sheet = workbook.add_worksheet("Escalation Matrix")
        format1 = workbook.add_format({'font_name': 'Arial'})
        format = workbook.add_format(
            {'font_name': 'Arial', 'bold': True, 'bg_color': '#486646', 'font_color': 'white', 'bottom': 2})
        sheet.set_row(0, 20)
        sheet.set_column('A:F', 30)
        sheet.write('A1', 'Level(lv1,lv2,lv3,lv4)', format)
        sheet.write('B1', 'Name', format)
        sheet.write('C1', 'Designation', format)
        sheet.write('D1', 'Mail ID', format)
        sheet.write('E1', 'Contact Number', format)
        sheet.write('F1', 'Escalation Time', format)
        n = 2
        for rec in self.escalation_matrix:
            sheet.write('A' + str(n), rec.level if rec.level else '', format1)
            sheet.write('B' + str(n), rec.name if rec.name else '', format1)
            sheet.write('C' + str(n), rec.designation if rec.designation else '', format1)
            sheet.write('D' + str(n), rec.email if rec.email else '', format1)
            sheet.write('E' + str(n), rec.contact_number if rec.contact_number else '', format1)
            sheet.write('F' + str(n), rec.escalation_time if rec.escalation_time else '', format1)
            n += 1

            n += 1
        sheet = workbook.add_worksheet("Monitoring Details")
        format = workbook.add_format(
            {'font_name': 'Arial', 'bold': True, 'bg_color': '#486646', 'font_color': 'white', 'bottom': 2})
        sheet.set_row(0, 20)
        sheet.set_column('A:E', 30)
        sheet.write('A1', 'Monitor Tool', format)
        sheet.write('A2', 'Monitor Tool Version', format)
        sheet.write('A3', 'Monitoring IP', format)
        sheet.write('A4', 'Customer Environment Access', format)
        sheet.write('A6', 'Monitor Url', format)


        sheet = workbook.add_worksheet("Report Members")
        format1 = workbook.add_format({'font_name': 'Arial'})
        format = workbook.add_format(
            {'font_name': 'Arial', 'bold': True, 'bg_color': '#486646', 'font_color': 'white', 'bottom': 2})
        sheet.set_row(0, 20)
        sheet.set_column('A:D', 30)
        sheet.write('A1', 'Report Type(daily,monthly)', format)
        sheet.write('B1', 'Name', format)
        sheet.write('C1', 'Mail Type', format)
        sheet.write('D1', 'Mail', format)
        n = 2
        for rec in self.report_members:
            sheet.write('A' + str(n), rec.report_type if rec.report_type else '', format1)
            sheet.write('B' + str(n), rec.name if rec.name else '', format1)
            sheet.write('C' + str(n), rec.mail_type if rec.mail_type else '', format1)
            sheet.write('D' + str(n), rec.email if rec.email else '', format1)
            n += 1
        workbook.close()
        fo = open(url + 'epo_details_report' + '.xlsx', "rb+")
        values = {
            'name': 'epo_details_report',
            'res_model': 'ir.ui.view',
            'res_id': False,
            'type': 'binary',
            'public': True,
            'datas': base64.encodestring(fo.read()),
        }
        attachment_id = self.env['ir.attachment'].sudo().create(values)
        template_id = self.env.ref('sale_costing.send_epo_details_template')
        template_id.attachment_ids = False
        template_id.attachment_ids = attachment_id
        template_id.send_mail(self.id, force_send=True)
        # download_url = '/web/content/' + str(attachment_id.id) + '?download=True'
        # base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')
        # return {
        #     "type": "ir.actions.act_url",
        #     "url": str(base_url) + str(download_url),
        #     "target": "self",
        # }




